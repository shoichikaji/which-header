#!/usr/bin/env perl
use strict;
use utf8;
use warnings;

my $USAGE = <<'___';
Usage: which-header [options] headers
  -t, --type=TYPE           search type: all, c, or c++
  -h, --help                show this help
  -I, --include=DIRECTORY   prepend search directories
  -s, --show                show search directories, and exit

Example:
  $ which-header time.h
  $ which-header ctime string
___

{
    package App;
    use Cwd 'abs_path';
    use Getopt::Long qw(:config no_auto_abbrev no_ignore_case bundling);
    sub new { bless {}, shift }
    sub parse_options {
        my $self = shift;
        local @ARGV = @_;
        @ARGV = map { /-I(\S.*)/ ? ("-I", $1) : $_ } @ARGV;
        $self->{include} ||= [];
        GetOptions
            "t|type=s"     => \($self->{type} = "all"),
            "h|help"       => sub { print $USAGE; exit },
            "include|I=s@" => $self->{include},
            "s|show"       => \$self->{show},
        or exit 2;
        $self->{header} = \@ARGV;
        $self;
    }
    sub _uniq { my %uniq; grep { !$uniq{$_}++ } @_ }
    sub _search_list {
        my ($self, $type) = @_;
        my $cmd = "echo | gcc -x$type -v -E -";
        my @line = `$cmd 2>&1 >/dev/null`;
        $? == 0 or die "Failed to exec `$cmd`\n";
        my $in;
        my @search_list;
        while (my $line = shift @line) {
            if ($line =~ /search\s+starts\s+here/i) {
                $in++;
            }
            if ($line =~ /\QEnd of search list\E/) {
                last;
            }
            if ($in and $line =~ s{^\s*(?=/)}{}) {
                chomp $line;
                $line =~ s{\s+\Q(framework directory)\E}{};
                push @search_list, $line;
            }
        }
        [ _uniq map { abs_path $_ } grep -d, @search_list ];
    }
    sub run {
        my $self = shift;
        @{$self->{header}} or die "Missing argument\n";
        my @type = $self->{type} eq "all" ? ("c", "c++") : $self->{type};
        my @search_list = @{$self->{include}};
        for my $type (@type) {
            push @search_list, @{ $self->_search_list($type) };
            if ($self->{show}) {
                print "$type: $_\n" for @{ $self->_search_list($type) };
            }
        }
        exit if $self->{show};
        @search_list = _uniq @search_list;
        my $found;
        for my $header (@{$self->{header}}) {
            my @found = grep -f, map { "$_/$header" } @search_list;
            print "$_\n" for @found;
            $found++ if @found;
        }
        die "Not found\n" unless $found;
    }
}

App->new->parse_options(@ARGV)->run;

